/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 06 23:43:42 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.TimeTable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeTable_ESTest extends TimeTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>(linkedHashSet0);
      Appt appt0 = new Appt(0, 0, 8, 8, 0, "Second date specified is not  before the first date specified.", "1O1GbZ)C]");
      linkedList0.add(appt0);
      linkedList0.add(appt0);
      linkedList0.add(appt0);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertNotSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      // Undeclared exception!
      try { 
        timeTable0.permute((LinkedList<Appt>) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>(linkedHashSet0);
      Appt appt0 = new Appt(0, 0, 8, 8, 0, "Second date specified is not  before the first date specified.", "1O1GbZ)C]");
      linkedList0.add(appt0);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt(0, 0, 3, 0, 0, "|Zf!m)'u]fkegp", "|Zf!m)'u]fkegp");
      linkedList0.add(appt0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1), (-1), (-1), (-1));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      // Undeclared exception!
      timeTable0.getApptRange((LinkedList<Appt>) null, mockGregorianCalendar0, mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>(linkedHashSet0);
      int[] intArray0 = new int[3];
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertNotSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>(linkedHashSet0);
      Appt appt0 = new Appt(0, 0, 8, 8, 0, "Second date specified is not  before the first date specified.", "1O1GbZ)C]");
      linkedList0.add(appt0);
      Appt appt1 = new Appt(0, 0, (-1036), 0, (-1036), "Second date specified is not  before the first date specified.", "Second date specified is not  before the first date specified.");
      linkedList0.add(appt1);
      linkedList0.add(appt0);
      timeTable0.deleteAppt(linkedList0, appt0);
      assertEquals(3, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>(linkedHashSet0);
      Appt appt0 = new Appt(0, 0, 8, 8, 0, "Second date specified is not  before the first date specified.", "1O1GbZ)C]");
      linkedList0.add(appt0);
      linkedList0.add(appt0);
      linkedList0.add(appt0);
      timeTable0.deleteAppt(linkedList0, appt0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>(linkedHashSet0);
      Appt appt0 = new Appt(0, 0, 8, 8, 0, "Second date specified is not  before the first date specified.", "1O1GbZ)C]");
      appt0.setStartMonth(0);
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, (Appt) null);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedHashSet<Appt> linkedHashSet0 = new LinkedHashSet<Appt>();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>(linkedHashSet0);
      Appt appt0 = new Appt(0, 0, 8, 8, 0, "Second date specified is not  before the first date specified.", "1O1GbZ)C]");
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      Appt appt0 = new Appt((-749), (-749), (-2746), 0, (-749), "xA.q*U>=Jk-05yK", "xA.q*U>=Jk-05yK");
      LinkedList<Appt> linkedList0 = timeTable0.deleteAppt((LinkedList<Appt>) null, appt0);
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      Locale locale0 = Locale.CHINA;
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Second date specified is not  before the first date specified.
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2367, 2367, 3);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        timeTable0.getApptRange((LinkedList<Appt>) null, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }
}
