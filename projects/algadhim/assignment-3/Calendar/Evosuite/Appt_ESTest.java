/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 06 23:45:34 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalendarUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt((-1053), (-1053), 11, 11, 11, "~@&^9w%F4B)S'", "~@&^9w%F4B)S'");
      int[] intArray0 = new int[10];
      appt0.setRecurrence(intArray0, (-1053), 12, (-1053));
      appt0.isRecurring();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(0, 1, 3, 1, 0, "", "");
      int[] intArray0 = new int[9];
      intArray0[1] = 2;
      CalendarUtil.DaysInMonth = intArray0;
      appt0.setStartMonth(1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 2, 0, (-957), "NLs:K/*", "o3$/|-~F2}Z8{6");
      appt0.setStartMinute(60);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt((-3042), (-3042), 0, 0, (-3042), "", "calendar.CalendarUtil");
      appt0.setStartHour(24);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 2, 2, 2, (String) null, (String) null);
      appt0.getValid();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(12, 3, 0, 0, 3, ",6d}DPWz.*_9G", "");
      appt0.getTitle();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, (String) null);
      appt0.getStartYear();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 4, (-953), "*i9$)MA!", "*i9$)MA!");
      appt0.getStartYear();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 3, 3, 3, "y+WwZgs]kzn", "y+WwZgs]kzn");
      appt0.setStartMonth(0);
      int int0 = appt0.getStartMonth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt(3591, 3591, 0, 0, 31, "fuv", "fuv");
      int int0 = appt0.getStartMinute();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(31, appt0.getStartYear());
      assertEquals("fuv", appt0.getDescription());
      assertEquals(3591, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3591, appt0.getStartHour());
      assertEquals(0, appt0.getStartDay());
      assertEquals("fuv", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-1416), "g/C@)ykw+Pf*R,$r", "g/C@)ykw+Pf*R,$r");
      appt0.setStartMinute((-441));
      int int0 = appt0.getStartMinute();
      assertEquals((-441), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-1416), "g/C@)ykw+Pf*R,$r", "g/C@)ykw+Pf*R,$r");
      int int0 = appt0.getStartHour();
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("g/C@)ykw+Pf*R,$r", appt0.getTitle());
      assertEquals("g/C@)ykw+Pf*R,$r", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals((-1416), appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt((-1053), 9, 11, 0, 11, "~@&^9w%F4B)S'", "~@&^9w%F4B)S'");
      appt0.setStartHour(3);
      int int0 = appt0.getStartHour();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt((-621), 0, (-621), 0, (-621), "", "");
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getStartMinute());
      assertEquals((-621), appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-621), appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-621), int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      int[] intArray0 = new int[7];
      appt0.setRecurrence(intArray0, (-1051), 11, 11);
      int int0 = appt0.getRecurNumber();
      assertEquals((-1051), appt0.getRecurBy());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      int[] intArray0 = new int[7];
      appt0.setRecurrence(intArray0, (-1459), (-845), (-1889));
      int int0 = appt0.getRecurNumber();
      assertEquals((-1889), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      int[] intArray0 = new int[7];
      appt0.setRecurrence(intArray0, (-1051), 11, 11);
      int int0 = appt0.getRecurIncrement();
      assertEquals((-1051), appt0.getRecurBy());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 8, 0, 8, "pm", "pm");
      int[] intArray0 = new int[7];
      appt0.setRecurrence(intArray0, (-2906), (-2906), 28);
      int int0 = appt0.getRecurIncrement();
      assertEquals(28, appt0.getRecurNumber());
      assertEquals((-2906), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, (String) null);
      int[] intArray0 = new int[9];
      appt0.setRecurrence(intArray0, 1067, 0, 0);
      appt0.getRecurDays();
      assertEquals(1067, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[5];
      Appt appt0 = new Appt((-105), 0, 2386, 11, 5, "ak\"f)AqW4un]\u0004okj", "ak\"f)AqW4un]\u0004okj");
      appt0.setRecurrence(intArray0, 0, 0, (-585));
      int int0 = appt0.getRecurBy();
      assertEquals((-585), appt0.getRecurNumber());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(291, (-1240), 498, 0, 0, "Rm*\"lg  BW~Wp", "Rm*\"lg  BW~Wp");
      int[] intArray0 = new int[7];
      appt0.setRecurrence(intArray0, (-1240), (-50), 3);
      int int0 = appt0.getRecurBy();
      assertEquals((-50), appt0.getRecurIncrement());
      assertEquals((-1240), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt(30, 5, 30, 5, 30, "Elb)sY?c1", "Elb)sY?c1");
      String string0 = appt0.getDescription();
      assertEquals(5, appt0.getStartMonth());
      assertFalse(appt0.getValid());
      assertEquals("Elb)sY?c1", string0);
      assertEquals(30, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(5, appt0.getStartMinute());
      assertEquals(30, appt0.getStartDay());
      assertEquals(30, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "calendar.CalendarUtil", "calendar.CalendarUtil");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartYear(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, (-1376), 0, (-1376), "A&", "A&");
      int[] intArray0 = new int[1];
      appt0.setStartMonth(6);
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartYear(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 2, 2, (-1723), (String) null, (String) null);
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMonth(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt((-3042), (-3042), 0, 0, (-3042), "", "calendar.CalendarUtil");
      // Undeclared exception!
      try { 
        appt0.setStartMonth(24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(5, 5, 5, 5, 5, "/", "/");
      int[] intArray0 = new int[5];
      CalendarUtil.DaysInMonth = intArray0;
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 134, 11, 723, "_io.wh7$iOI", "8r/=8BR");
      int[] intArray0 = new int[8];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 3, 3, 3, "", "/");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartHour(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt(5, 5, 5, 5, (-1433), "hr6UsK$nS{<RtSR~", "hr6UsK$nS{<RtSR~");
      int[] intArray0 = new int[3];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartHour((-1846));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt(418, 418, 0, 0, 3737, "\n", ", ");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartDay(683);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Appt appt0 = new Appt((-5923), (-5923), 3, 3, (-5923), "calendar.CalendarUtil", "calendar.CalendarUtil");
      int[] intArray0 = new int[1];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartDay(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = null;
      try {
        appt0 = new Appt(60, 60, 60, 60, 60, "I#1hD=Y!wW", "I#1hD=Y!wW");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 60
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-1416), "g/C@)ykw+Pf*R,$r", "g/C@)ykw+Pf*R,$r");
      appt0.setDescription(".P&lyz?H");
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1416), appt0.getStartYear());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appt appt0 = new Appt(0, 1, 3, 1, 0, "", "");
      appt0.setDescription((String) null);
      assertEquals(1, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals(3, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Appt appt0 = new Appt((-621), 0, (-621), 0, (-621), "", "");
      appt0.setTitle((String) null);
      assertEquals((-621), appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-621), appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals((-621), appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Appt appt0 = new Appt((-621), 0, (-621), 0, (-621), "", "");
      appt0.setTitle("");
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-621), appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-621), appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-621), appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, (-1416), "g/C@)ykw+Pf*R,$r", "g/C@)ykw+Pf*R,$r");
      int int0 = appt0.getStartMinute();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, int0);
      assertEquals("g/C@)ykw+Pf*R,$r", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartDay());
      assertEquals((-1416), appt0.getStartYear());
      assertEquals("g/C@)ykw+Pf*R,$r", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Appt appt0 = new Appt((-1053), (-1053), 11, 11, 11, "~@&^9w%F4B)S'", "~@&^9w%F4B)S'");
      int int0 = appt0.getStartHour();
      assertEquals(11, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartDay());
      assertEquals((-1053), appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1053), int0);
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(11, appt0.getStartMonth());
      assertEquals("~@&^9w%F4B)S'", appt0.getDescription());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 3, 3, 3, "y+WwZgs]kzn", "y+WwZgs]kzn");
      int int0 = appt0.getStartMonth();
      assertEquals(3, appt0.getStartYear());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(3, int0);
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Appt appt0 = new Appt((-1053), (-1053), 11, 11, 11, "~@&^9w%F4B)S'", "~@&^9w%F4B)S'");
      int int0 = appt0.getStartYear();
      assertFalse(appt0.getValid());
      assertEquals((-1053), appt0.getStartMinute());
      assertEquals(11, appt0.getStartDay());
      assertEquals("~@&^9w%F4B)S'", appt0.getDescription());
      assertEquals(11, appt0.getStartMonth());
      assertEquals((-1053), appt0.getStartHour());
      assertEquals("~@&^9w%F4B)S'", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, int0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, (String) null, (String) null);
      boolean boolean0 = appt0.getValid();
      assertFalse(boolean0);
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      String string0 = appt0.getTitle();
      assertEquals(11, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartHour());
      assertNotNull(string0);
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(11, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(11, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Appt appt0 = new Appt(2, 2, 2, 2, 2, (String) null, (String) null);
      appt0.getDescription();
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      int int0 = appt0.getStartDay();
      assertEquals(11, appt0.getStartYear());
      assertEquals(11, appt0.getStartHour());
      assertEquals(11, int0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 3, 3, 3, "", "/");
      String string0 = appt0.toString();
      assertEquals("\t3/3/3 at 12:0am ,, /\n", string0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Appt appt0 = new Appt(14, 14, 14, 1, 14, (String) null, (String) null);
      String string0 = appt0.toString();
      assertEquals("\t1/14/14 at 2:14pm ,, \n", string0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Appt appt0 = new Appt(12, 12, 10, 1, 10, (String) null, (String) null);
      String string0 = appt0.toString();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("\t1/10/10 at 12:12pm ,, \n", string0);
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      int[] intArray0 = new int[7];
      appt0.setRecurrence(intArray0, (-1051), 11, 11);
      boolean boolean0 = appt0.isRecurring();
      assertEquals(11, appt0.getRecurNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Appt appt0 = new Appt(12, 3, 0, 0, 3, ",6d}DPWz.*_9G", "");
      boolean boolean0 = appt0.isRecurring();
      assertEquals(3, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(12, appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(boolean0);
      assertEquals(0, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(3, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Appt appt0 = new Appt(418, 418, 0, 0, 3737, "\n", ", ");
      appt0.setRecurrence((int[]) null, (-907), (-907), (-1911));
      assertEquals((-1911), appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Appt appt0 = new Appt((-1053), (-1053), 11, 11, 11, "~@&^9w%F4B)S'", "~@&^9w%F4B)S'");
      appt0.setStartMinute(1000);
      appt0.setStartHour(0);
      assertEquals(0, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Appt appt0 = new Appt(291, (-1240), 498, 0, 0, "Rm*\"lg  BW~Wp", "Rm*\"lg  BW~Wp");
      int[] intArray0 = appt0.getRecurDays();
      assertEquals((-1240), appt0.getStartMinute());
      assertEquals(498, appt0.getStartDay());
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("Rm*\"lg  BW~Wp", appt0.getDescription());
      assertEquals(291, appt0.getStartHour());
      assertEquals("Rm*\"lg  BW~Wp", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Appt appt0 = new Appt(291, (-1240), 498, 0, 0, "Rm*\"lg  BW~Wp", "Rm*\"lg  BW~Wp");
      int int0 = appt0.getRecurBy();
      assertEquals(291, appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, int0);
      assertEquals(498, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-1240), appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("Rm*\"lg  BW~Wp", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      assertEquals(11, appt0.getStartDay());
      
      appt0.setStartDay(0);
      int int0 = appt0.getStartDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      appt0.setStartYear(4827);
      assertEquals(4827, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      int int0 = appt0.getRecurIncrement();
      assertEquals(11, appt0.getStartHour());
      assertEquals(11, appt0.getStartYear());
      assertEquals(0, int0);
      assertEquals(11, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(11, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      assertEquals(0, appt0.getStartMonth());
      
      appt0.setStartMonth(11);
      String string0 = appt0.toString();
      assertEquals("\t11/11/11 at 11:11am ,, \n", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      String string0 = appt0.toString();
      assertEquals(11, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(11, appt0.getStartHour());
      assertNull(string0);
      assertEquals(11, appt0.getStartYear());
      assertEquals(11, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 0, 11, (String) null, (String) null);
      int int0 = appt0.getRecurNumber();
      assertEquals(11, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(11, appt0.getStartDay());
      assertEquals(0, int0);
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(11, appt0.getStartHour());
      assertEquals(11, appt0.getStartYear());
  }
}
